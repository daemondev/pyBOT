"""
http://blog.pythonisito.com/2012/05/gridfs-mongodb-filesystem.html
http://api.mongodb.com/python/current/examples/gridfs.html
https://api.mongodb.com/python/1.8/examples/gridfs.html
https://stackoverflow.com/questions/7719466/how-to-convert-a-string-to-a-function-in-python
http://lybniz2.sourceforge.net/safeeval.html

class MainWindow(QMainWindow):
    def __init__(self):
        QMainWindow.__init__(self)

        startQuiz = QAction("Start Quiz", self)
        startQuiz.triggered.connect(self.startQuizQuestions)

        menubar = self.menuBar()
        quizMenu = menubar.addMenu("&Quiz")
        quizMenu.addAction(startQuiz)

        self.setGeometry(300, 300, 500, 400)
        self.setWindowTitle("xyz")
        self.show()

    def startQuizQuestions(self):
        newQuiz = Quiz()
        self.setCentralWidget(newQuiz)


def main():
    app = QApplication(sys.argv)
    window = MainWindow()
    window.show()
    sys.exit(app.exec_())

if __name__ == '__main__':
    main()
"""

#-------------------------------------------------- BEGIN [beautifulsoup interaction] - (09-09-2017 - 11:30:17 p.m.) {{
from contextlib import closing
from selenium.webdriver import Firefox # pip install selenium
from selenium.webdriver.support.ui import WebDriverWait
from BeautifulSoup import BeautifulSoup
from selenium.webdriver.common.by import By
from selenium.webdriver.support import expected_conditions as EC
# use firefox to get page with javascript generated content
with closing(Firefox()) as driver:
    driver.get("http://www.att.com/shop/wireless/devices/smartphones.html")
    button = driver.find_element_by_id('deviceShowAllLink')
    button.click()
    # wait for the page to load
    element = WebDriverWait(driver, 10).until(
    EC.invisibility_of_element_located((By.ID, "deviceShowAllLink"))
    )
    # store it to string variable
    page_source = driver.page_source

soup = BeautifulSoup(page_source)
items = soup.findAll('div', {"class": "list-item"})
print "items count:",len(items)
#-------------------------------------------------- END   [beautifulsoup interaction] - (09-09-2017 - 11:30:17 p.m.) }}
#-------------------------------------------------- BEGIN [send javascriptcode] - (09-09-2017 - 11:30:38 p.m.) {{
jsClick = """var evObj = document.createEvent('MouseEvents');
             evObj.initEvent('click', true, true );
             this.dispatchEvent(evObj);
             """

allSelector = "a#deviceShowAllLink" # This is the css selector you actually need
allButton   = r.frame.documentElement().findFirst(allSelector)
allButton.evaluateJavaScript(jsClick)
#-------------------------------------------------- END   [send javascriptcode] - (09-09-2017 - 11:30:38 p.m.) }}
#-------------------------------------------------- BEGIN [no find element exception] - (09-09-2017 - 11:35:42 p.m.) {{
NoSuchElementException
element.send_keys(" and some", Keys.ARROW_DOWN)
#-------------------------------------------------- END   [no find element exception] - (09-09-2017 - 11:35:42 p.m.) }}
#-------------------------------------------------- BEGIN [list wiodows] - (09-09-2017 - 11:43:57 p.m.) {{
driver.switch_to_default_content()
driver.switch_to_frame("frameName")
driver.switch_to_window("windowName")
alert = driver.switch_to_alert()
driver.forward()

cookie = {‘name’ : ‘foo’, ‘value’ : ‘bar’}
driver.add_cookie(cookie)



    find_element_by_id
    find_element_by_name
    find_element_by_xpath
    find_element_by_link_text
    find_element_by_partial_link_text
    find_element_by_tag_name
    find_element_by_class_name
    find_element_by_css_selector

driver.find_element(By.XPATH, '//button[text()="Some text"]')
driver.find_elements(By.XPATH, '//button')

ID = "id"
XPATH = "xpath"
LINK_TEXT = "link text"
PARTIAL_LINK_TEXT = "partial link text"
NAME = "name"
TAG_NAME = "tag name"
CLASS_NAME = "class name"
CSS_SELECTOR = "css selector"

<html>
 <body>
  <form id="loginForm">
   <input name="username" type="text" />
   <input name="password" type="password" />
   <input name="continue" type="submit" value="Login" />
   <input name="continue" type="button" value="Clear" />
  </form>
</body>
<html>

login_form = driver.find_element_by_xpath("/html/body/form[1]")
login_form = driver.find_element_by_xpath("//form[1]")
login_form = driver.find_element_by_xpath("//form[@id='loginForm']")

username = driver.find_element_by_xpath("//form[input/@name='username']")
username = driver.find_element_by_xpath("//form[@id='loginForm']/input[1]")
username = driver.find_element_by_xpath("//input[@name='username']")


The “Clear” button element can be located like this:

clear_button = driver.find_element_by_xpath("//input[@name='continue'][@type='button']")
clear_button = driver.find_element_by_xpath("//form[@id='loginForm']/input[4]")


<html>
 <body>
  <p>Are you sure you want to do this?</p>
  <a href="continue.html">Continue</a>
  <a href="cancel.html">Cancel</a>
</body>
<html>

continue_link = driver.find_element_by_link_text('Continue')
continue_link = driver.find_element_by_partial_link_text('Conti')

content = driver.find_element_by_css_selector('p.content')

# And now output all the available cookies for the current URL
driver.get_cookies()
driver.back()
for handle in driver.window_handles:
    driver.switch_to_window(handle)
#-------------------------------------------------- END   [list wiodows] - (09-09-2017 - 11:43:57 p.m.) }}
#-------------------------------------------------- BEGIN [xpath] - (10-09-2017 - 12:05:42 a.m.) {{

Direct child
A direct child in XPATH is defined by the use of a “/“, while on CSS, it’s defined using “>”
Examples:
//div/a
css=div > a


Child or subchild
If an element could be inside another or one it’s childs, it’s defined in XPATH using “//” and in CSS just by a whitespace.
Examples:
//div//a
css=div a

Id
An element’s id in XPATH is defined using: “[@id='example']” and in CSS using: “#”
Examples:
//div[@id='example']//a
css=div#example a

Class
For class, things are pretty similar in XPATH: “[@class='example']” while in CSS it’s just “.”
Examples:
//div[@class='example']//a
css=div.example a

II: Advanced
Next sibling
This is useful for navigating lists of elements, such as forms or ul items. The next sibling will tell selenium to find the next adjacent element on the page that’s inside the same parent. Let’s show an example using a form to select the field after username.
</input> </input>
Let’s write a css selector that will choose the input field after “username”. This will select the “alias” input, or will select a different element if the form is reordered.
css=form input.username + input

Attribute values
If you don’t care about the ordering of child elements, you can use an attribute selector in selenium to choose elements based on any attribute value. A good example would be choosing the ‘username’ element of the form without adding a class.
</input> </input> </input> </input>
We can easily select the username element without adding a class or an id to the element.
css=form input[name='username']
We can even chain filters to be more specific with our selections.
css=input[name='continue'][type='button']
Here Selenium will act on the input field with name=”continue” and type=”button”

Choosing a specific match
CSS selectors in Selenium allow us to navigate lists with more finess that the above methods. If we have a ul and we want to select its fourth li element without regard to any other elements, we should use nth-child or nth-of-type.

    <p>Heading</p>
    Cat
    Dog
    Car
    Goat

If we want to select the fourth li element (Goat) in this list, we can use the nth-of-type, which will find the fourth li in the list.
css=ul#recordlist li:nth-of-type(4)
On the other hand, if we want to get the fourth element only if it is a li element, we can use a filtered nth-child which will select (Car) in this case.
css=ul#recordlist li:nth-child(4)
Note, if you don’t specify a child type for nth-child it will allow you to select the fourth child without regard to type. This may be useful in testing css layout in selenium.

css=ul#recordlist *:nth-child(4)


Sub-string matches

CSS in Selenium has an interesting feature of allowing partial string matches using ^=, $=, or *=. I’ll define them, then show an example of each:

^= Match a prefix
css=a[id^='id_prefix_']

A link with an “id” that starts with the text “id_prefix_”

$= Match a suffix
css=a[id$='_id_sufix']

A link with an “id” that ends with the text “_id_sufix”

*= Match a substring
css=a[id*='id_pattern']

A link with an “id” that contains the text “id_pattern”


Matching by inner text

And last, one of the more useful pseudo-classes, :contains() will match elements with the desired text block:

css=a:contains('Log Out')


#-------------------------------------------------- END   [xpath] - (10-09-2017 - 12:05:42 a.m.) }}
#-------------------------------------------------- BEGIN [chains] - (10-09-2017 - 03:37:53 p.m.) {{
menu = driver.find_element_by_css_selector(".nav")
hidden_submenu = driver.find_element_by_css_selector(".nav #submenu1")

ActionChains(driver).move_to_element(menu).click(hidden_submenu).perform()

menu = driver.find_element_by_css_selector(".nav")
hidden_submenu = driver.find_element_by_css_selector(".nav #submenu1")

actions = ActionChains(driver)
actions.move_to_element(menu)
actions.click(hidden_submenu)
actions.perform()

#-------------------------------------------------- END   [chains] - (10-09-2017 - 03:37:53 p.m.) }}
#-------------------------------------------------- BEGIN [dotnet mvc tooling] - (29-09-2017 - 9:42:13) {{
https://download.microsoft.com/download/4/6/1/46116DFF-29F9-4FF8-94BF-F9BE05BE263B/DotNetCore.1.0.0.RC2-VS2015Tools.Preview1.exe
DotNetCore.1.0.0.RC2-VS2015Tools.Preview1.exe /Layout .\Setup
DotNetCore.1.0.0.RC2-VS2015Tools.Preview1.exe /install /passive /quite
https://www.linkedin.com/pulse/aspnet-5-rc-1-update-offline-installer-ali-bahraminezhad
https://www.linkedin.com/pulse/net-core-rc2-sdk-preview-1-offline-installer-ali-bahraminezhad
https://stackoverflow.com/questions/34352059/how-can-i-download-the-offline-installer-for-asp-net-5
#-------------------------------------------------- END   [dotnet mvc tooling] - (29-09-2017 - 9:42:13) }}
#-------------------------------------------------- BEGIN [db comparision] - (04-10-2017 - 18:43:28) {{
https://github.com/MDY-BPO
https://db-engines.com/en/system/MongoDB%3BRethinkDB
https://db-engines.com/en/ranking
#-------------------------------------------------- END   [db comparision] - (04-10-2017 - 18:43:28) }}

#-------------------------------------------------- BEGIN [for ssh] - (05-10-2017 - 11:09:43) {{

I've just configurated in version 3.8

cd c:\openssh\bin
mkpasswd -l -u myuser1 -p /cygdrive\C\Home\Path >> ..\etc\passwd
mkpasswd -l -u myotheruser2 -p /cygdrive\C\Other\Home\Path >> ..\etc\passwd

But inside both directories (C:\Home\Path and C:\Other\Home\Path) it has to have the user folder:
C:\Home\Path\myuser1
and
C:\Other\Home\Path\myotheruser2

So,
when myuser1 logs in, he will be inside C:\Home\Path\myuser1
and
when myotheruser2 logs in, he will be inside C:\Other\Home\Path\myotheruser2
-----------------------------------------------------


 403
down vote
accepted


In ~/.ssh/config, add:

host github.com
 HostName github.com
 IdentityFile ~/.ssh/id_rsa_github
 User git

Now you can do git clone git@github.com:username/repo.git.

NOTE: Verify that the permissions on IdentityFile are 400.SSH will reject, in a not clearly explicit manner, SSH keys that are too readable. It will just look like a credential rejection. The solution, in this case, is:

chmod 400 ~/.ssh/id_rsa_github
----------------------------------------------------


Environment variable GIT_SSH_COMMAND:

From Git version 2.3.0, you can use the environment variable GIT_SSH_COMMAND like this:

GIT_SSH_COMMAND="ssh -i ~/.ssh/id_rsa_example" git clone example

Note that -i can sometimes be overridden by your config file, in which case, you should give SSH an empty config file, like this:

GIT_SSH_COMMAND="ssh -i ~/.ssh/id_rsa_example -F /dev/null" git clone example

Configuration core.sshCommand:

From Git version 2.10.0, you can configure this per repo or globally, so you don't have to set the environment variable any more!

git config core.sshCommand "ssh -i ~/.ssh/id_rsa_example -F /dev/null"
git pull
git push

----------------------------------------------------
https://superuser.com/questions/232373/how-to-tell-git-which-private-key-to-use
----------------------------------------------------
prepare for pull IN github
ready now!!!
#-------------------------------------------------- END   [for ssh] - (05-10-2017 - 11:09:43) }}
